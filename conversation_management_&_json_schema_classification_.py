# -*- coding: utf-8 -*-
"""Conversation Management & JSON-schema Classification .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HjudAfs2-9UA41pESnVAuwe9tEtzKpWA
"""

# ============================
# Setup API Key
# ============================
import os
os.environ['OPENAI_API_KEY'] = "gsk_....."

import requests
import json

# ============================
# API Call Function
# ============================
def call_chat_api(messages, functions=None, function_call=None, max_tokens=256, temperature=0.7):
    """
    Calls Groq's OpenAI-compatible chat API.
    Returns parsed JSON response.
    """
    api_key = os.environ.get("OPENAI_API_KEY")
    assert api_key, "Set OPENAI_API_KEY in environment before running this cell."

    payload = {
        "model": "llama-3.1-8b-instant",
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature,
    }
    if functions:
        payload["functions"] = functions
    if function_call:
        payload["function_call"] = function_call

    headers = {"Authorization": f"Bearer {api_key}"}
    url = "https://api.groq.com/openai/v1/chat/completions"

    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()
    return response.json()

# ============================
#  Conversation Manager
# ============================
class ConversationManager:
    def __init__(self, summary_every_k=3):
        self.history = []
        self.run_count = 0
        self.summary_every_k = summary_every_k

    def append_user(self, msg):
        self.history.append({"role": "user", "content": msg})

    def append_assistant(self, msg):
        self.history.append({"role": "assistant", "content": msg})

    def get_history(self):
        return self.history

    def apply_periodic_summary(self, max_words=50):
        self.run_count += 1
        if self.run_count % self.summary_every_k == 0:
            summary_text_input = "\n".join([f"{m['role']}: {m['content']}" for m in self.history])
            summary_prompt = [
                {"role": "system", "content": f"Summarize the following conversation in under {max_words} words."},
                {"role": "user", "content": summary_text_input},
            ]
            resp = call_chat_api(summary_prompt, max_tokens=128)
            summary_text = resp["choices"][0]["message"]["content"]
            # Replace history with summary
            self.history = [{"role": "system", "content": f"Summary so far: {summary_text}"}]
            return True, summary_text
        return False, None

# ============================
# Conversation Demo
# ============================
cm = ConversationManager(summary_every_k=3)

sample_pairs = [
    ("Hi, I'm Adhya. I want help with a Python assignment on queues.", "Sureâ€”what specifically? FIFO/LRU?"),
    ("How to implement FIFO page replacement?", "You can maintain a queue and ... (explanation)"),
    ("Can you show a small code snippet?", "Yes, here's a minimal Python example..."),
    ("Thanks. Also, I need to extract user info from chats later.", "We can do JSON schema extraction with function calling.")
]

for user_msg, assistant_msg in sample_pairs:
    cm.append_user(user_msg)
    cm.append_assistant(assistant_msg)
    run_number = len(cm.get_history()) // 2
    print(f"\nðŸ‘‰ Run {run_number}: User said: {user_msg}")
    print(f"Assistant replied: {assistant_msg}")

    summarized, summary = cm.apply_periodic_summary(max_words=50)
    if summarized:
        print(f"\nâœ… Periodic summarization triggered (run_count={cm.run_count})")
        print(f"Summary:\n{summary}\n---")

print("\nðŸ“Œ Full conversation stored (after feeding):")
for m in cm.get_history():
    print(f"{m['role']}: {m['content']}")

# ============================
# JSON Schema Extraction Example
# ============================
user_message = "Hello, I'm Adhya, my email is adhya@example.com, phone 9876543210, living in Bangalore, age 21."

json_schema_function = [
    {
        "name": "extract_user_info",
        "description": "Extract name, email, phone, location, age from user message",
        "parameters": {
            "type": "object",
            "properties": {
                "name": {"type": "string"},
                "email": {"type": "string"},
                "phone": {"type": "string"},
                "location": {"type": "string"},
                "age": {"type": "integer"}
            },
            "required": ["name", "email", "phone", "location", "age"]
        }
    }
]

resp = call_chat_api(
    messages=[{"role": "user", "content": user_message}],
    functions=json_schema_function,
    function_call="auto",
    max_tokens=128
)

print("\nðŸ“Œ JSON Schema Extraction Result:")
print(json.dumps(resp, indent=2))